'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = exports.meta = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _moduleVisitor = require('eslint-module-utils/moduleVisitor');

var _moduleVisitor2 = _interopRequireDefault(_moduleVisitor);

var _parsePackageName = require('parse-package-name');

var _parsePackageName2 = _interopRequireDefault(_parsePackageName);

var _getMonorepoPackages = require('get-monorepo-packages');

var _getMonorepoPackages2 = _interopRequireDefault(_getMonorepoPackages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var meta = exports.meta = {
  schema: [(0, _moduleVisitor.makeOptionsSchema)({})]
};

var create = exports.create = function create(context) {
  var _context$options = _slicedToArray(context.options, 1),
      moduleUtilOptions = _context$options[0];

  var packages = (0, _getMonorepoPackages2.default)(process.cwd());

  return (0, _moduleVisitor2.default)(function (node) {
    var _tryParse = tryParse(node.value),
        name = _tryParse.name,
        internalPath = _tryParse.path;

    if (internalPath && packages.find(function (pkg) {
      return pkg.package.name === name;
    })) {
      context.report({
        node: node,
        message: 'Import for monorepo package \'' + name + '\' is internal.'
      });
    }
  }, moduleUtilOptions);
};

var tryParse = function tryParse(text) {
  try {
    return (0, _parsePackageName2.default)(text);
  } catch (error) {
    return { path: text, name: '' };
  }
};