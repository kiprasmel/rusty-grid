'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.create = exports.meta = undefined;

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _resolve = require('eslint-module-utils/resolve');

var _resolve2 = _interopRequireDefault(_resolve);

var _moduleVisitor = require('eslint-module-utils/moduleVisitor');

var _moduleVisitor2 = _interopRequireDefault(_moduleVisitor);

var _pathIsInside = require('path-is-inside');

var _pathIsInside2 = _interopRequireDefault(_pathIsInside);

var _minimatch = require('minimatch');

var _minimatch2 = _interopRequireDefault(_minimatch);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _getMonorepoPackages = require('get-monorepo-packages');

var _getMonorepoPackages2 = _interopRequireDefault(_getMonorepoPackages);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var meta = exports.meta = {
  schema: [(0, _moduleVisitor.makeOptionsSchema)({})],
  fixable: 'code'
};

var create = exports.create = function create(context) {
  var _context$options = _slicedToArray(context.options, 1),
      moduleUtilOptions = _context$options[0];

  var sourceFsPath = context.getFilename();
  var packages = (0, _getMonorepoPackages2.default)(process.cwd());

  return (0, _moduleVisitor2.default)(function (node) {
    var resolvedPath = (0, _resolve2.default)(node.value, context);
    var packageDir = getPackageDir(sourceFsPath, packages);

    if (!packageDir || !resolvedPath || (0, _pathIsInside2.default)(resolvedPath, packageDir)) {
      return;
    }

    var pkg = packages.find(function (pkg) {
      return (0, _pathIsInside2.default)(resolvedPath, pkg.location);
    });
    if (!pkg) {
      return;
    }

    var subPackagePath = _path2.default.relative(pkg.location, resolvedPath);
    context.report({
      node: node,
      message: 'Import for monorepo package \'' + pkg.package.name + '\' should be absolute.',
      fix: function fix(fixer) {
        fixer.replaceText(node, '' + pkg.package.name + (subPackagePath !== '.' ? '/' + subPackagePath : ''));
      }
    });
  }, moduleUtilOptions);
};

var getPackageDir = function getPackageDir(filePath, packages) {
  var match = packages.find(function (pkg) {
    return (0, _minimatch2.default)(filePath, _path2.default.join(pkg.location, '**'));
  });
  if (match) {
    return match.location;
  }
};