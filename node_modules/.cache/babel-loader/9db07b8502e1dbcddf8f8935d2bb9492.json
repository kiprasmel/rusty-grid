{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";// eslint-disable-next-line import/no-cycle\nimport{computeShortestPath}from\"./shortestPath\";// eslint-disable-next-line import/no-cycle\nimport{SquareState}from\"./Square\";import{clamp,getPseudoRandomIdx,to1DIdx}from\"./utils\";export var MAX_ROWS=20;// could be up to ~ 250, but definitely no more than 255 (u16)\nexport var MAX_COLS=20;// could be up to ~ 250, but definitely no more than 255 (u16)\nexport var MIN_ROWS=1;export var MIN_COLS=1;var initGrid=function initGrid(){var rows=arguments.length>0&&arguments[0]!==undefined?arguments[0]:10;var cols=arguments.length>1&&arguments[1]!==undefined?arguments[1]:10;var isInverted=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var grid=new Uint8Array(rows*cols);var idx=to1DIdx(cols);for(var i=0;i<rows;i++){for(var j=0;j<cols;j++){grid[idx(i,j)]=isInverted?SquareState.Clear:SquareState.Filled;}}grid[idx(getPseudoRandomIdx(rows),0)]=SquareState.Start;grid[idx(getPseudoRandomIdx(rows),cols-1)]=SquareState.End;return grid;};var getDefaultState=function getDefaultState(){return{grid:initGrid(),//\nrows:10,cols:10,dirtyRows:10,dirtyCols:10,hasShortestPath:false,indicesOfShortestPathSquares:new Uint16Array(),isInverted:false};};var initialState=getDefaultState();export var slice=createSlice({name:\"grid\",initialState:initialState,reducers:{reset:function reset(){return getDefaultState();},eventuallySetRows:function eventuallySetRows(state,action){state.dirtyRows=clamp(action.payload,MIN_ROWS,MAX_ROWS);},eventuallySetCols:function eventuallySetCols(state,action){state.dirtyCols=clamp(action.payload,MIN_COLS,MAX_COLS);},commitResize:function commitResize(state){state.rows=state.dirtyRows;state.cols=state.dirtyCols;var newGrid=initGrid(state.dirtyRows,state.dirtyCols,state.isInverted);state.grid=newGrid;state.hasShortestPath=false;state.indicesOfShortestPathSquares=computeShortestPath(newGrid,state.dirtyRows,state.dirtyCols);},invert:{reducer:function reducer(state,action){state.isInverted=!state.isInverted;state.grid=action.payload.grid;state.indicesOfShortestPathSquares=action.payload.indicesOfShortestPathSquares;state.hasShortestPath=action.payload.hasShortestPath;},prepare:function prepare(grid,rows,cols){var newGrid=grid.map(function(sq){return sq===SquareState.Filled?SquareState.Clear:sq===SquareState.Clear?// eslint-disable-line indent\nSquareState.Filled// eslint-disable-line indent\n:sq;}// eslint-disable-line indent\n);var indicesOfShortestPathSquares=computeShortestPath(newGrid,rows,cols);window.grid=Array.from(newGrid);return{payload:{grid:newGrid,indicesOfShortestPathSquares:indicesOfShortestPathSquares,hasShortestPath:indicesOfShortestPathSquares.length>0}};}},clickSquare:{reducer:function reducer(state,action){var _action$payload=action.payload,grid=_action$payload.grid,squareState=_action$payload.squareState,hasShortestPath=_action$payload.hasShortestPath,indicesOfShortestPathSquares=_action$payload.indicesOfShortestPathSquares;if([SquareState.Start,SquareState.End].includes(squareState)){return;}state.grid=grid;state.hasShortestPath=hasShortestPath;state.indicesOfShortestPathSquares=indicesOfShortestPathSquares;},prepare:function prepare(rows,cols,squareState,row,col,grid){var newGrid=new Uint8Array(grid);var idx=to1DIdx(cols);var targetIdx=idx(row,col);window.grid=newGrid;if(!newGrid[targetIdx]&&newGrid[targetIdx]!==0){throw new Error(\"target not found when preparing `clickSquare`\");}if([SquareState.Start,SquareState.End].includes(squareState)){// TODO: SKIP\n}else if(squareState===SquareState.Filled){newGrid[targetIdx]=SquareState.Clear;}else if(squareState===SquareState.Clear){newGrid[targetIdx]=SquareState.Filled;}else{var err=new Error(\"\\\"invalid state\\\", \".concat(squareState));throw err;}var indicesOfShortestPathSquares=computeShortestPath(newGrid,rows,cols);console.log(\"indicesOfShortestPathSquares\",indicesOfShortestPathSquares);return{payload:{squareState:squareState,grid:newGrid,hasShortestPath:indicesOfShortestPathSquares.length>0,indicesOfShortestPathSquares:indicesOfShortestPathSquares}};}}}});var _slice$actions=slice.actions,reset=_slice$actions.reset,eventuallySetRows=_slice$actions.eventuallySetRows,eventuallySetCols=_slice$actions.eventuallySetCols,commitResize=_slice$actions.commitResize,invert=_slice$actions.invert,clickSquare=_slice$actions.clickSquare;export{reset,eventuallySetRows,eventuallySetCols,commitResize,invert,clickSquare};export default slice.reducer;","map":{"version":3,"sources":["/home/runner/work/rusty-grid/rusty-grid/src/features/grid/gridSlice.ts"],"names":["createSlice","computeShortestPath","SquareState","clamp","getPseudoRandomIdx","to1DIdx","MAX_ROWS","MAX_COLS","MIN_ROWS","MIN_COLS","initGrid","rows","cols","isInverted","grid","Uint8Array","idx","i","j","Clear","Filled","Start","End","getDefaultState","dirtyRows","dirtyCols","hasShortestPath","indicesOfShortestPathSquares","Uint16Array","initialState","slice","name","reducers","reset","eventuallySetRows","state","action","payload","eventuallySetCols","commitResize","newGrid","invert","reducer","prepare","map","sq","window","Array","from","length","clickSquare","squareState","includes","row","col","targetIdx","Error","err","console","log","actions"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// eslint-disable-next-line import/no-cycle\nimport { computeShortestPath } from \"./shortestPath\";\n// eslint-disable-next-line import/no-cycle\nimport { SquareState } from \"./Square\";\n\nimport { clamp, getPseudoRandomIdx, to1DIdx } from \"./utils\";\n\nexport const MAX_ROWS = 20; // could be up to ~ 250, but definitely no more than 255 (u16)\nexport const MAX_COLS = 20; // could be up to ~ 250, but definitely no more than 255 (u16)\n\nexport const MIN_ROWS = 1;\nexport const MIN_COLS = 1;\n\nexport type GridT = Uint8Array;\nexport type IndicesOfShortestPathT = Uint16Array;\n\nconst initGrid = (rows: number = 10, cols: number = 10, isInverted: boolean = false): GridT => {\n\tconst grid: GridT = new Uint8Array(rows * cols);\n\n\tconst idx = to1DIdx(cols);\n\n\tfor (let i = 0; i < rows; i++) {\n\t\tfor (let j = 0; j < cols; j++) {\n\t\t\tgrid[idx(i, j)] = isInverted ? SquareState.Clear : SquareState.Filled;\n\t\t}\n\t}\n\n\tgrid[idx(getPseudoRandomIdx(rows), 0)] = SquareState.Start;\n\tgrid[idx(getPseudoRandomIdx(rows), cols - 1)] = SquareState.End;\n\n\treturn grid;\n};\n\ninterface State {\n\tgrid: GridT;\n\n\trows: number;\n\tcols: number;\n\n\tdirtyRows: number;\n\tdirtyCols: number;\n\n\thasShortestPath: boolean;\n\tindicesOfShortestPathSquares: IndicesOfShortestPathT;\n\n\tisInverted: boolean;\n}\n\nconst getDefaultState = (): State => ({\n\tgrid: initGrid(), //\n\trows: 10,\n\tcols: 10,\n\tdirtyRows: 10,\n\tdirtyCols: 10,\n\thasShortestPath: false,\n\tindicesOfShortestPathSquares: new Uint16Array(),\n\tisInverted: false,\n});\n\nconst initialState: State = getDefaultState();\n\nexport const slice = createSlice({\n\tname: \"grid\",\n\tinitialState,\n\treducers: {\n\t\treset: (): State => getDefaultState(),\n\t\teventuallySetRows: (state, action: PayloadAction<number>): void => {\n\t\t\tstate.dirtyRows = clamp(action.payload, MIN_ROWS, MAX_ROWS);\n\t\t},\n\t\teventuallySetCols: (state, action): void => {\n\t\t\tstate.dirtyCols = clamp(action.payload, MIN_COLS, MAX_COLS);\n\t\t},\n\t\tcommitResize: (state): void => {\n\t\t\tstate.rows = state.dirtyRows;\n\t\t\tstate.cols = state.dirtyCols;\n\t\t\tconst newGrid: GridT = initGrid(state.dirtyRows, state.dirtyCols, state.isInverted);\n\t\t\tstate.grid = newGrid;\n\n\t\t\tstate.hasShortestPath = false;\n\t\t\tstate.indicesOfShortestPathSquares = computeShortestPath(newGrid, state.dirtyRows, state.dirtyCols);\n\t\t},\n\t\tinvert: {\n\t\t\treducer: (\n\t\t\t\tstate,\n\t\t\t\taction: PayloadAction<{\n\t\t\t\t\tgrid: GridT;\n\t\t\t\t\tindicesOfShortestPathSquares: Uint16Array;\n\t\t\t\t\thasShortestPath: boolean;\n\t\t\t\t}>\n\t\t\t): void => {\n\t\t\t\tstate.isInverted = !state.isInverted;\n\t\t\t\tstate.grid = action.payload.grid;\n\t\t\t\tstate.indicesOfShortestPathSquares = action.payload.indicesOfShortestPathSquares;\n\t\t\t\tstate.hasShortestPath = action.payload.hasShortestPath;\n\t\t\t},\n\t\t\tprepare: (grid: GridT, rows: number, cols: number) => {\n\t\t\t\tconst newGrid: GridT = grid.map(\n\t\t\t\t\t(sq) =>\n\t\t\t\t\t\tsq === SquareState.Filled\n\t\t\t\t\t\t\t? SquareState.Clear\n\t\t\t\t\t\t\t: sq === SquareState.Clear\n\t\t\t\t\t\t\t? // eslint-disable-line indent\n\t\t\t\t\t\t\t  SquareState.Filled // eslint-disable-line indent\n\t\t\t\t\t\t\t: sq // eslint-disable-line indent\n\t\t\t\t);\n\n\t\t\t\tconst indicesOfShortestPathSquares: Uint16Array = computeShortestPath(newGrid, rows, cols);\n\n\t\t\t\t(window as any).grid = Array.from(newGrid);\n\n\t\t\t\treturn {\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tgrid: newGrid,\n\t\t\t\t\t\tindicesOfShortestPathSquares,\n\t\t\t\t\t\thasShortestPath: indicesOfShortestPathSquares.length > 0,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t\tclickSquare: {\n\t\t\treducer: (\n\t\t\t\tstate,\n\t\t\t\taction: PayloadAction<{\n\t\t\t\t\tsquareState: SquareState;\n\t\t\t\t\tgrid: GridT;\n\t\t\t\t\thasShortestPath: boolean;\n\t\t\t\t\tindicesOfShortestPathSquares: Uint16Array;\n\t\t\t\t}>\n\t\t\t): void => {\n\t\t\t\tconst { grid, squareState, hasShortestPath, indicesOfShortestPathSquares } = action.payload;\n\n\t\t\t\tif ([SquareState.Start, SquareState.End].includes(squareState)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tstate.grid = grid;\n\t\t\t\tstate.hasShortestPath = hasShortestPath;\n\t\t\t\tstate.indicesOfShortestPathSquares = indicesOfShortestPathSquares;\n\t\t\t},\n\t\t\tprepare: (rows: number, cols: number, squareState: SquareState, row: number, col: number, grid: GridT) => {\n\t\t\t\tconst newGrid: GridT = new Uint8Array(grid);\n\n\t\t\t\tconst idx = to1DIdx(cols);\n\t\t\t\tconst targetIdx = idx(row, col);\n\n\t\t\t\t(window as any).grid = newGrid;\n\n\t\t\t\tif (!newGrid[targetIdx] && newGrid[targetIdx] !== 0) {\n\t\t\t\t\tthrow new Error(\"target not found when preparing `clickSquare`\");\n\t\t\t\t}\n\n\t\t\t\tif ([SquareState.Start, SquareState.End].includes(squareState)) {\n\t\t\t\t\t// TODO: SKIP\n\t\t\t\t} else if (squareState === SquareState.Filled) {\n\t\t\t\t\tnewGrid[targetIdx] = SquareState.Clear;\n\t\t\t\t} else if (squareState === SquareState.Clear) {\n\t\t\t\t\tnewGrid[targetIdx] = SquareState.Filled;\n\t\t\t\t} else {\n\t\t\t\t\tconst err = new Error(`\"invalid state\", ${squareState}`);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tconst indicesOfShortestPathSquares: IndicesOfShortestPathT = computeShortestPath(newGrid, rows, cols);\n\n\t\t\t\tconsole.log(\"indicesOfShortestPathSquares\", indicesOfShortestPathSquares);\n\n\t\t\t\treturn {\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tsquareState,\n\t\t\t\t\t\tgrid: newGrid,\n\t\t\t\t\t\thasShortestPath: indicesOfShortestPathSquares.length > 0,\n\t\t\t\t\t\tindicesOfShortestPathSquares,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t},\n});\n\nexport const { reset, eventuallySetRows, eventuallySetCols, commitResize, invert, clickSquare } = slice.actions;\n\nexport default slice.reducer;\n"]},"metadata":{},"sourceType":"module"}