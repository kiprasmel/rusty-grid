{"version":3,"sources":["config.js","features/grid/Square.tsx","features/grid/utils.ts","features/grid/shortestPath.ts","features/grid/gridSlice.ts","features/grid/Button.tsx","features/grid/Grid.tsx","features/grid/Row.tsx","features/grid/Label.tsx","features/grid/UIStates.tsx","features/grid/Logo.tsx","features/app/App.tsx","features/app/store.ts","serviceWorker.ts","index.tsx"],"names":["url","homepageUrl","require","homepage","includes","substring","length","module","exports","SquareState","clamp","n","min","max","Math","getPseudoRandomIdx","maxExcl","round","random","to1DIdx","cols","i","j","computeShortestPathWasm","swapSquareState","state","newState","Filled","Clear","Start","End","Error","SquareItem","isPartOfShortestPath","handleClick","className","children","rest","backgroundColor","type","onClick","cx","css","RowOfSquares","rows","Array","fill","map","_","row","ColumnOfSquares","grid","indicesOfShortestPathSquares","dispatch","useDispatch","col","squareIdx","squareState","clickSquare","hasLoadedShortestPathWasm","loadShortestPathWasm","a","loadedWasm","breadth_first_search_shortest_path","window","sp","computeShortestPath","filter","sq","console","log","Uint16Array","startIdx","findIdxOfFirstWithState","initGrid","isInverted","Uint8Array","idx","getDefaultState","dirtyRows","dirtyCols","hasShortestPath","hideUIStates","initialState","slice","createSlice","name","reducers","reset","eventuallySetRows","action","payload","eventuallySetCols","commitResize","newGrid","toggleUIStates","invert","reducer","prepare","swapSquareStateInGrid","actions","Button","Grid","useSelector","id","value","onChange","e","Number","target","onKeyPress","key","preventDefault","Row","ref","Label","label","UIStates","toggle","title","Logo","src","alt","App","useEffect","store","configureStore","gridReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","ignoredPaths","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.87a1288d.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/no-var-requires, no-param-reassign */\n\n/**\n * @param {string} url\n * @returns {string}\n */\nconst fixHomepageUrl = (url) => {\n\tif (url[0] !== \"/\") {\n\t\tif ([\".\", \"./\"].includes(url)) {\n\t\t\turl = \"/\";\n\t\t} else if ([\".\", \"./\"].includes(url[0])) {\n\t\t\turl = url.substring(1);\n\t\t} else {\n\t\t\turl = `/${url}`;\n\t\t}\n\t}\n\n\tif (url[url.length - 1] !== \"/\") {\n\t\turl = `${url}/`;\n\t}\n\n\treturn url;\n};\n\n/**\n * @type string\n */\nconst homepageUrl = fixHomepageUrl(require(\"../package.json\").homepage);\n\nmodule.exports = {\n\thomepageUrl,\n};\n","import React, { FC, Fragment } from \"react\";\nimport { css, cx } from \"emotion\";\nimport { useDispatch } from \"react-redux\";\n\n// eslint-disable-next-line import/no-cycle\nimport { clickSquare, GridT, IndicesOfShortestPathT } from \"./gridSlice\";\nimport { to1DIdx } from \"./utils\";\n\nexport enum SquareState {\n\tFilled = 0,\n\tClear = 1,\n\tStart = 2,\n\tEnd = 3,\n}\n\nexport const swapSquareState = (state: SquareState): SquareState => {\n\tconst newState = {\n\t\t[SquareState.Filled]: SquareState.Clear,\n\t\t[SquareState.Clear]: SquareState.Filled,\n\t\t[SquareState.Start]: SquareState.Start, // no swap\n\t\t[SquareState.End]: SquareState.End, // no swap\n\t}[state];\n\n\tif (!newState && newState !== 0) {\n\t\tthrow new Error(`invalid squareState provided to \\`swapSquareState\\` function (${state})`);\n\t}\n\n\treturn newState;\n};\n\nexport const swapSquareStateInGrid = (grid: GridT, squareIdx: number, squareState: SquareState): GridT => {\n\tif (!grid[squareIdx] && grid[squareIdx] !== 0) {\n\t\tthrow new Error(\"target not found when preparing `clickSquare`\");\n\t}\n\n\tconst newGrid: GridT = new Uint8Array(grid);\n\tconst newState: SquareState = swapSquareState(squareState);\n\tnewGrid[squareIdx] = newState;\n\n\tconsole.log(\"state\", squareState, \"newState\", newState);\n\n\treturn newGrid;\n};\n\nexport type SquareItemProps = {\n\tstate: SquareState;\n\tisPartOfShortestPath?: boolean;\n\thandleClick?: () => any;\n} & React.DetailedHTMLProps<React.HTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\nexport const SquareItem: FC<SquareItemProps> = ({\n\tstate,\n\tisPartOfShortestPath = false,\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function\n\thandleClick = (): void => {},\n\tclassName,\n\tchildren,\n\t...rest\n}) => {\n\tconst defaultColor: string = \"hsl(0, 0%, 90%)\";\n\n\tconst backgroundColor: string =\n\t\tisPartOfShortestPath && ![SquareState.Start, SquareState.End].includes(state)\n\t\t\t? \"hsl(130, 100%, 87%)\"\n\t\t\t: {\n\t\t\t\t\t[SquareState.Start]: \"hsl(-60,100%,90%)\", // eslint-disable-line indent\n\t\t\t\t\t[SquareState.End]: \"hsl(170, 100%,85%)\", // eslint-disable-line indent\n\t\t\t\t\t[SquareState.Filled]: defaultColor, // eslint-disable-line indent\n\t\t\t\t\t[SquareState.Clear]: \"white\", // eslint-disable-line indent\n\t\t\t  }[state];\n\n\treturn (\n\t\t<button\n\t\t\ttype=\"button\"\n\t\t\t{...rest}\n\t\t\tonClick={handleClick}\n\t\t\tclassName={cx(\n\t\t\t\tcss`\n\t\t\t\t\tmin-width: 35px;\n\t\t\t\t\tmin-height: 35px;\n\n\t\t\t\t\tmax-width: 70px;\n\t\t\t\t\tmax-height: 70px;\n\n\t\t\t\t\tmargin: 0;\n\t\t\t\t\tpadding: 0;\n\n\t\t\t\t\tbackground-color: ${backgroundColor};\n\n\t\t\t\t\tborder: 1px solid hsla(0, 0%, 50%, 0.5);\n\n\t\t\t\t\t&:hover {\n\t\t\t\t\t\tbackground: ${isPartOfShortestPath ||\n\t\t\t\t\t\t[SquareState.Start, SquareState.End, SquareState.Filled].includes(state) // eslint-disable-next-line indent\n\t\t\t\t\t\t\t? backgroundColor // eslint-disable-next-line indent\n\t\t\t\t\t\t\t: // eslint-disable-next-line indent\n\t\t\t\t\t\t\t  \"hsla(0, 0%, 95%, 0.95)\"};\n\t\t\t\t\t}\n\n\t\t\t\t\t&:active {\n\t\t\t\t\t\tbackground: hsla(0, 0%, 50%, 0.5);\n\t\t\t\t\t}\n\t\t\t\t`,\n\t\t\t\tclassName\n\t\t\t)}\n\t\t>\n\t\t\t{children}\n\t\t</button>\n\t);\n};\n\nexport interface RowOfSquaresProps {\n\trows: number;\n\tchildren: (row: number) => React.ReactNode;\n}\n\nexport const RowOfSquares: FC<RowOfSquaresProps> = ({ rows, children }) => (\n\t<>\n\t\t{new Array(rows).fill(0).map((_, row) => (\n\t\t\t<Fragment key={row}>{children(row)}</Fragment>\n\t\t))}\n\t</>\n);\n\ninterface ColumnOfSquaresProps {\n\trows: number;\n\tcols: number;\n\trow: number;\n\tgrid: GridT;\n\tindicesOfShortestPathSquares: IndicesOfShortestPathT;\n}\n\nexport const ColumnOfSquares: FC<ColumnOfSquaresProps> = ({ rows, cols, row, grid, indicesOfShortestPathSquares }) => {\n\tconst dispatch = useDispatch();\n\n\treturn (\n\t\t<Fragment key={row}>\n\t\t\t{new Array(cols).fill(0).map((_, col) => {\n\t\t\t\tconst squareIdx = to1DIdx(cols)(row, col);\n\n\t\t\t\tconst squareState = grid[squareIdx];\n\n\t\t\t\treturn (\n\t\t\t\t\t<SquareItem\n\t\t\t\t\t\tkey={`${row}-${col}`}\n\t\t\t\t\t\tstate={squareState}\n\t\t\t\t\t\tisPartOfShortestPath={indicesOfShortestPathSquares.includes(squareIdx)}\n\t\t\t\t\t\thandleClick={(): any => dispatch(clickSquare(grid, rows, cols, squareIdx, squareState))}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})}\n\t\t</Fragment>\n\t);\n};\n","/**\n * ensure `min <= n <= max`\n */\nexport const clamp = (n: number, min: number, max: number): number => Math.max(Math.min(n, max), min);\n\n/**\n * get pseudo random index in range `[0; maxExcl)`\n */\nexport const getPseudoRandomIdx = (maxExcl: number): number => Math.round(Math.random() * (maxExcl - 1));\n\n/**\n * convert from 2D to 1D index\n */\nexport const to1DIdx = (cols: number) => (i: number, j: number): number => i * cols + j;\n","// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, camelcase\nimport * as sp from \"../../../node_modules/shortest-path/shortest_path\";\n// import { SquareState } from \"../../../node_modules/shortest-path/shortest_path\";\n\n// eslint-disable-next-line import/no-cycle\nimport { GridT, IndicesOfShortestPathT } from \"./gridSlice\";\n// eslint-disable-next-line import/no-cycle\nimport { SquareState } from \"./Square\";\n\n// export { SquareState };\n\n// eslint-disable-next-line camelcase\nlet computeShortestPathWasm: typeof sp.breadth_first_search_shortest_path;\nlet hasLoadedShortestPathWasm: boolean = false;\n\n/**\n * must be loaded asynchronously\n */\nexport const loadShortestPathWasm = async (): Promise<void> => {\n\t// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved\n\tconst loadedWasm = await import(\"../../../node_modules/shortest-path/shortest_path.js\");\n\n\tcomputeShortestPathWasm = loadedWasm.breadth_first_search_shortest_path;\n\thasLoadedShortestPathWasm = true;\n\n\t(window as any).sp = computeShortestPathWasm;\n};\n\nexport const computeShortestPath = (grid: GridT, rows: number, cols: number): IndicesOfShortestPathT => {\n\tconst clearSquareCount: number = grid.filter((sq) => sq === SquareState.Clear).length;\n\n\tif (clearSquareCount < Math.min(rows, cols) - 2) {\n\t\t/**\n\t\t * impossible to have any path that connects start & end\n\t\t */\n\t\tconsole.log(\"skipping computation because impossible\");\n\n\t\treturn new Uint16Array();\n\t}\n\n\tif (!hasLoadedShortestPathWasm) {\n\t\tthrow new Error(\"wasm not loaded yet\");\n\t}\n\n\tconst findIdxOfFirstWithState = (state: SquareState): number => {\n\t\tfor (let i = 0; i < grid.length; i++) {\n\t\t\tif (grid[i] === state) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"state not found\");\n\t};\n\n\tconst startIdx: number = findIdxOfFirstWithState(SquareState.Start);\n\n\tconst indicesOfSquaresBelongingToShortestPath: IndicesOfShortestPathT = computeShortestPathWasm(\n\t\tgrid,\n\t\trows,\n\t\tcols,\n\t\tstartIdx\n\t);\n\n\treturn indicesOfSquaresBelongingToShortestPath;\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// eslint-disable-next-line import/no-cycle\nimport { computeShortestPath } from \"./shortestPath\";\n// eslint-disable-next-line import/no-cycle\nimport { SquareState, swapSquareState, swapSquareStateInGrid } from \"./Square\";\n\nimport { clamp, getPseudoRandomIdx, to1DIdx } from \"./utils\";\n\nexport const MAX_ROWS = 20; // could be up to ~ 250, but definitely no more than 255 (u16)\nexport const MAX_COLS = 20; // could be up to ~ 250, but definitely no more than 255 (u16)\n\nexport const MIN_ROWS = 1;\nexport const MIN_COLS = 1;\n\nexport type GridT = Uint8Array;\nexport type IndicesOfShortestPathT = Uint16Array;\n\nconst initGrid = (rows: number = 10, cols: number = 10, isInverted: boolean = false): GridT => {\n\tconst grid: GridT = new Uint8Array(rows * cols);\n\n\tconst idx = to1DIdx(cols);\n\n\tfor (let i = 0; i < rows; i++) {\n\t\tfor (let j = 0; j < cols; j++) {\n\t\t\tgrid[idx(i, j)] = isInverted ? SquareState.Clear : SquareState.Filled;\n\t\t}\n\t}\n\n\tgrid[idx(getPseudoRandomIdx(rows), 0)] = SquareState.Start;\n\tgrid[idx(getPseudoRandomIdx(rows), cols - 1)] = SquareState.End;\n\n\treturn grid;\n};\n\ninterface State {\n\tgrid: GridT;\n\n\trows: number;\n\tcols: number;\n\n\tdirtyRows: number;\n\tdirtyCols: number;\n\n\thasShortestPath: boolean;\n\tindicesOfShortestPathSquares: IndicesOfShortestPathT;\n\n\tisInverted: boolean;\n\thideUIStates: boolean;\n}\n\nconst getDefaultState = (): State => ({\n\tgrid: initGrid(), //\n\trows: 10,\n\tcols: 10,\n\tdirtyRows: 10,\n\tdirtyCols: 10,\n\thasShortestPath: false,\n\tindicesOfShortestPathSquares: new Uint16Array(),\n\tisInverted: false,\n\thideUIStates: false,\n});\n\nconst initialState: State = getDefaultState();\n\nexport const slice = createSlice({\n\tname: \"grid\",\n\tinitialState,\n\treducers: {\n\t\treset: (): State => getDefaultState(),\n\t\teventuallySetRows: (state, action: PayloadAction<number>): void => {\n\t\t\tstate.dirtyRows = clamp(action.payload, MIN_ROWS, MAX_ROWS);\n\t\t},\n\t\teventuallySetCols: (state, action): void => {\n\t\t\tstate.dirtyCols = clamp(action.payload, MIN_COLS, MAX_COLS);\n\t\t},\n\t\tcommitResize: (state): void => {\n\t\t\tif (state.dirtyRows <= 1 && state.dirtyCols <= 1) {\n\t\t\t\tstate.dirtyRows = 2;\n\t\t\t\tstate.dirtyCols = 2;\n\t\t\t}\n\n\t\t\tstate.rows = state.dirtyRows;\n\t\t\tstate.cols = state.dirtyCols;\n\t\t\tconst newGrid: GridT = initGrid(state.dirtyRows, state.dirtyCols, state.isInverted);\n\t\t\tstate.grid = newGrid;\n\n\t\t\tstate.hasShortestPath = false;\n\t\t\tstate.indicesOfShortestPathSquares = computeShortestPath(newGrid, state.dirtyRows, state.dirtyCols);\n\t\t},\n\t\ttoggleUIStates: (state): void => {\n\t\t\tstate.hideUIStates = !state.hideUIStates;\n\t\t},\n\t\tinvert: {\n\t\t\treducer: (\n\t\t\t\tstate,\n\t\t\t\taction: PayloadAction<{\n\t\t\t\t\tgrid: GridT;\n\t\t\t\t\tindicesOfShortestPathSquares: Uint16Array;\n\t\t\t\t\thasShortestPath: boolean;\n\t\t\t\t}>\n\t\t\t): void => {\n\t\t\t\tstate.isInverted = !state.isInverted;\n\t\t\t\tstate.grid = action.payload.grid;\n\t\t\t\tstate.indicesOfShortestPathSquares = action.payload.indicesOfShortestPathSquares;\n\t\t\t\tstate.hasShortestPath = action.payload.hasShortestPath;\n\t\t\t},\n\t\t\tprepare: (grid: GridT, rows: number, cols: number) => {\n\t\t\t\tconst newGrid: GridT = grid.map(swapSquareState);\n\t\t\t\tconst indicesOfShortestPathSquares: Uint16Array = computeShortestPath(newGrid, rows, cols);\n\n\t\t\t\treturn {\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tgrid: newGrid,\n\t\t\t\t\t\tindicesOfShortestPathSquares,\n\t\t\t\t\t\thasShortestPath: indicesOfShortestPathSquares.length > 0,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t\tclickSquare: {\n\t\t\treducer: (\n\t\t\t\tstate,\n\t\t\t\taction: PayloadAction<{\n\t\t\t\t\tsquareState: SquareState;\n\t\t\t\t\tgrid: GridT;\n\t\t\t\t\thasShortestPath: boolean;\n\t\t\t\t\tindicesOfShortestPathSquares: Uint16Array;\n\t\t\t\t}>\n\t\t\t): void => {\n\t\t\t\tconst { grid, squareState, hasShortestPath, indicesOfShortestPathSquares } = action.payload;\n\n\t\t\t\tif ([SquareState.Start, SquareState.End].includes(squareState)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tstate.grid = grid;\n\t\t\t\tstate.hasShortestPath = hasShortestPath;\n\t\t\t\tstate.indicesOfShortestPathSquares = indicesOfShortestPathSquares;\n\t\t\t},\n\t\t\tprepare: (grid: GridT, rows: number, cols: number, squareIdx: number, squareState: SquareState) => {\n\t\t\t\tconst newGrid: GridT = swapSquareStateInGrid(grid, squareIdx, squareState);\n\t\t\t\tconst indicesOfShortestPathSquares: IndicesOfShortestPathT = computeShortestPath(newGrid, rows, cols);\n\n\t\t\t\treturn {\n\t\t\t\t\tpayload: {\n\t\t\t\t\t\tsquareState,\n\t\t\t\t\t\tgrid: newGrid,\n\t\t\t\t\t\thasShortestPath: indicesOfShortestPathSquares.length > 0,\n\t\t\t\t\t\tindicesOfShortestPathSquares,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t},\n\t\t},\n\t},\n});\n\nexport const {\n\treset, //\n\teventuallySetRows,\n\teventuallySetCols,\n\tcommitResize,\n\tinvert,\n\ttoggleUIStates,\n\tclickSquare,\n} = slice.actions;\n\nexport default slice.reducer;\n","import { FC } from \"react\";\nimport { css, cx } from \"emotion\";\n\nexport type ButtonProps = React.DetailedHTMLProps<React.HTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\n\nexport const Button: FC<ButtonProps> = ({ children, ...rest }) => (\n\t<button\n\t\ttype=\"button\"\n\t\t{...rest}\n\t\tclassName={cx(\n\t\t\tcss`\n\t\t\t\t/* font-size: 1.5rem; */\n\t\t\t\tfont-size: 1.75rem;\n\t\t\t\t/* padding: 0.4rem 1rem; */\n\t\t\t\tpadding: 0.6rem 1.5rem;\n\n\t\t\t\tletter-spacing: -0.02em;\n\t\t\t\tborder-radius: 8px;\n\n\t\t\t\tbackground-color: hsl(220, 100%, 60%);\n\t\t\t\tcolor: white;\n\n\t\t\t\t&:hover {\n\t\t\t\t\tbackground-color: hsl(220, 100%, 75%);\n\t\t\t\t\ttransition: background-color 0.2s ease-in-out;\n\t\t\t\t}\n\n\t\t\t\t&:focus {\n\t\t\t\t\tbackground-color: hsl(220, 100%, 35%);\n\t\t\t\t}\n\t\t\t`,\n\t\t\trest.className\n\t\t)}\n\t>\n\t\t{children}\n\t</button>\n);\n","import React, { FC } from \"react\";\nimport { css } from \"emotion\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { RootState } from \"../app/store\";\nimport { commitResize, invert, eventuallySetCols, eventuallySetRows, GridT, IndicesOfShortestPathT } from \"./gridSlice\";\nimport { Button } from \"./Button\";\nimport { RowOfSquares, ColumnOfSquares } from \"./Square\";\n\nexport const Grid: FC = () => {\n\tconst dispatch = useDispatch();\n\n\tconst grid: GridT = useSelector((state: RootState) => state.grid.grid);\n\tconst rows: number = useSelector((state: RootState) => state.grid.rows);\n\tconst cols: number = useSelector((state: RootState) => state.grid.cols);\n\n\tconst dirtyRows: number = useSelector((state: RootState) => state.grid.dirtyRows);\n\tconst dirtyCols: number = useSelector((state: RootState) => state.grid.dirtyCols);\n\n\tconst indicesOfShortestPathSquares: IndicesOfShortestPathT = useSelector(\n\t\t(state: RootState) => state.grid.indicesOfShortestPathSquares\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t{/* generator */}\n\t\t\t<article\n\t\t\t\tclassName={css`\n\t\t\t\t\tbackground-color: hsla(0, 0%, 85%, 0.69);\n\t\t\t\t\tpadding: 1.5rem 3rem;\n\t\t\t\t\tborder-radius: 0.5rem;\n\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: row;\n\n\t\t\t\t\tjustify-content: flex-start;\n\t\t\t\t\talign-items: flex-end;\n\n\t\t\t\t\t& > * + * {\n\t\t\t\t\t\tmargin-left: 1rem;\n\t\t\t\t\t}\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\t<table\n\t\t\t\t\tclassName={css`\n\t\t\t\t\t\ttext-align: left;\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * select items inside all <tr> children\n\t\t\t\t\t\t * to add margin, because margin does not apply\n\t\t\t\t\t\t * to <tr> itself\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * & > (thead|tbody) > tr > all but not first (th|td) > some_itrem\n\t\t\t\t\t\t*/\n\t\t\t\t\t\t& > * > * > * + * > * {\n\t\t\t\t\t\t\tmargin-left: 1rem;\n\t\t\t\t\t\t}\n\t\t\t\t\t`}\n\t\t\t\t>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\t\t\tfont-weight: normal;\n\t\t\t\t\t\t\t\t\t\tfont-size: 1.5rem;\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tRows\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t{/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\t\t\tfont-weight: normal;\n\t\t\t\t\t\t\t\t\t\tfont-size: 1.5rem;\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tColumns\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t{/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t<span />\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"rows\"\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tvalue={dirtyRows}\n\t\t\t\t\t\t\t\t\tonChange={(e) => dispatch(eventuallySetRows(Number(e.target.value)))}\n\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\t\t\t\tif (e.key === \"Enter\") {\n\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\t\t\tdispatch(commitResize());\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\t\t\tfont-size: 2.25rem;\n\t\t\t\t\t\t\t\t\t\tpadding: 0.2rem 0.1rem;\n\t\t\t\t\t\t\t\t\t\tmax-width: 6rem;\n\n\t\t\t\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\t\t\t\tappearance: textfield;\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<p\n\t\t\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\t\t\tfont-size: 1.5rem;\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tx\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\tid=\"columns\"\n\t\t\t\t\t\t\t\t\ttype=\"number\"\n\t\t\t\t\t\t\t\t\tvalue={dirtyCols}\n\t\t\t\t\t\t\t\t\tonChange={(e) => dispatch(eventuallySetCols(Number(e.target.value)))}\n\t\t\t\t\t\t\t\t\tonKeyPress={(e) => {\n\t\t\t\t\t\t\t\t\t\tif (e.key === \"Enter\") {\n\t\t\t\t\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\t\t\t\t\tdispatch(commitResize());\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\t\t\tfont-size: 2.25rem;\n\t\t\t\t\t\t\t\t\t\tpadding: 0.2rem 0.1rem;\n\t\t\t\t\t\t\t\t\t\tmax-width: 6rem;\n\n\t\t\t\t\t\t\t\t\t\ttext-align: center;\n\t\t\t\t\t\t\t\t\t\tappearance: textfield;\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\t\t\tmargin-left: 2rem;\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\tonClick={() => dispatch(commitResize())}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span className={css``}>Generate</span>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\t\t\tmargin-left: 2rem;\n\t\t\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t\t\t\tonClick={() => dispatch(invert(grid, rows, cols))}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<span className={css``}>Invert</span>\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</article>\n\t\t\t{/* /generator */}\n\n\t\t\t{/* grid */}\n\t\t\t<article\n\t\t\t\tclassName={css`\n\t\t\t\t\tmargin-left: auto;\n\t\t\t\t\tmargin-right: auto;\n\n\t\t\t\t\tmax-width: 46rem;\n\t\t\t\t\tmax-height: 46rem;\n\n\t\t\t\t\tborder: 1px solid hsla(0, 0%, 50%, 0.5);\n\n\t\t\t\t\tdisplay: grid;\n\n\t\t\t\t\tgrid-template-columns: repeat(${cols}, minmax(35px, 70px));\n\t\t\t\t\tgrid-template-rows: repeat(${rows}, minmax(35px, 70px));\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\t<RowOfSquares rows={rows}>\n\t\t\t\t\t{(row): JSX.Element => (\n\t\t\t\t\t\t<ColumnOfSquares\n\t\t\t\t\t\t\tgrid={grid}\n\t\t\t\t\t\t\trows={rows}\n\t\t\t\t\t\t\tcols={cols}\n\t\t\t\t\t\t\trow={row}\n\t\t\t\t\t\t\tindicesOfShortestPathSquares={indicesOfShortestPathSquares}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t</RowOfSquares>\n\t\t\t</article>\n\t\t\t{/* /grid */}\n\t\t</>\n\t);\n};\n","import { FC } from \"react\";\nimport { css, cx } from \"emotion\";\n\nexport type RowProps = React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>;\nexport const Row: FC<RowProps> = ({ children, ref, ...rest }) => (\n\t<div\n\t\t{...rest}\n\t\tclassName={cx(\n\t\t\tcss`\n\t\t\t\tdisplay: flex;\n\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\n\t\t\t\t/* & > * {\n\t\t\t\tflex: 1;\n\t\t\t} */\n\t\t\t`,\n\t\t\trest.className\n\t\t)}\n\t>\n\t\t{children}\n\t</div>\n);\n","import { css } from \"emotion\";\nimport { FC } from \"react\";\n\nexport const Label: FC<{ label: string }> = ({ label, children }) => (\n\t<div\n\t\tclassName={css`\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\n\t\t\talign-items: flex-start;\n\n\t\t\t& > * + * {\n\t\t\t\tmargin-top: 0.25rem;\n\t\t\t}\n\t\t`}\n\t>\n\t\t<p\n\t\t\tclassName={css`\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\n\t\t\t\tfont-size: 1.5rem;\n\n\t\t\t\tword-wrap: normal;\n\t\t\t`}\n\t\t>\n\t\t\t{label}\n\t\t</p>\n\n\t\t{children}\n\t</div>\n);\n","import React, { FC } from \"react\";\nimport { css } from \"emotion\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { toggleUIStates } from \"./gridSlice\";\nimport { Row } from \"./Row\";\nimport { Label } from \"./Label\";\nimport { Button } from \"./Button\";\nimport { SquareItem, SquareState } from \"./Square\";\nimport { RootState } from \"../app/store\";\n\nexport const UIStates: FC = () => {\n\tconst dispatch = useDispatch();\n\tconst toggle = (): any => dispatch(toggleUIStates());\n\n\tconst shouldHide: boolean = useSelector((state: RootState) => state.grid.hideUIStates);\n\n\tif (shouldHide) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<article>\n\t\t\t{/* eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions */}\n\t\t\t<h2\n\t\t\t\ttitle=\"Click to hide\"\n\t\t\t\tonKeyPress={toggle}\n\t\t\t\tonClick={toggle}\n\t\t\t\tclassName={css`\n\t\t\t\t\ttext-align: left;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\tUI States\n\t\t\t</h2>\n\n\t\t\t<div\n\t\t\t\tclassName={css`\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: column;\n\n\t\t\t\t\t& > * + * {\n\t\t\t\t\t\tmargin-top: 3rem;\n\t\t\t\t\t}\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\t<Row\n\t\t\t\t\tclassName={css`\n\t\t\t\t\t\tjustify-content: flex-start;\n\t\t\t\t\t\t& > * + * {\n\t\t\t\t\t\t\tmargin-left: 4rem;\n\t\t\t\t\t\t}\n\t\t\t\t\t`}\n\t\t\t\t>\n\t\t\t\t\t<Label label=\"Default\">\n\t\t\t\t\t\t<Button>Generate</Button>\n\t\t\t\t\t</Label>\n\n\t\t\t\t\t<Label label=\"Hover\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\tbackground-color: hsl(220, 100%, 75%);\n\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tGenerate\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Label>\n\n\t\t\t\t\t<Label label=\"Down\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\tbackground-color: hsl(220, 100%, 35%);\n\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tGenerate\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</Label>\n\t\t\t\t</Row>\n\n\t\t\t\t<div\n\t\t\t\t\tclassName={css`\n\t\t\t\t\t\tdisplay: grid;\n\t\t\t\t\t\tgrid-template-columns: repeat(4, 1fr);\n\t\t\t\t\t\tgrid-row-gap: 1rem;\n\t\t\t\t\t`}\n\t\t\t\t>\n\t\t\t\t\t<Label label=\"Filled (default)\">\n\t\t\t\t\t\t<SquareItem state={SquareState.Filled} />\n\t\t\t\t\t</Label>\n\n\t\t\t\t\t<Label label=\"Hover\">\n\t\t\t\t\t\t<SquareItem\n\t\t\t\t\t\t\tstate={SquareState.Clear}\n\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\tbackground: hsla(0, 0%, 95%, 0.95);\n\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Label>\n\n\t\t\t\t\t<Label label=\"Down\">\n\t\t\t\t\t\t<SquareItem\n\t\t\t\t\t\t\tstate={SquareState.Filled}\n\t\t\t\t\t\t\tclassName={css`\n\t\t\t\t\t\t\t\tbackground: hsla(0, 0%, 50%, 0.5);\n\t\t\t\t\t\t\t`}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Label>\n\n\t\t\t\t\t<Label label=\"Clear\">\n\t\t\t\t\t\t<SquareItem state={SquareState.Clear} />\n\t\t\t\t\t</Label>\n\n\t\t\t\t\t<Label label=\"Start point\">\n\t\t\t\t\t\t<SquareItem state={SquareState.Start} />\n\t\t\t\t\t</Label>\n\n\t\t\t\t\t<Label label=\"End point\">\n\t\t\t\t\t\t<SquareItem state={SquareState.End} />\n\t\t\t\t\t</Label>\n\n\t\t\t\t\t<Label label=\"Shortest path\">\n\t\t\t\t\t\t<SquareItem state={SquareState.Clear} isPartOfShortestPath />\n\t\t\t\t\t</Label>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</article>\n\t);\n};\n","import { css } from \"emotion\";\nimport { homepageUrl } from \"../../config\";\n\nexport const Logo = () => (\n\t<article\n\t\tclassName={css`\n\t\t\ttext-align: left;\n\t\t`}\n\t>\n\t\t<img src={`${homepageUrl}assets/grid-logo.png`} alt=\"Grid logo\" />\n\t</article>\n);\n","import React, { useEffect } from \"react\";\nimport { css } from \"emotion\";\n\nimport { Grid } from \"../grid/Grid\";\nimport { loadShortestPathWasm } from \"../grid/shortestPath\";\nimport { UIStates } from \"../grid/UIStates\";\nimport { Logo } from \"../grid/Logo\";\n\nexport default function App(): JSX.Element {\n\tuseEffect(() => {\n\t\tloadShortestPathWasm();\n\t}, []);\n\n\treturn (\n\t\t<div\n\t\t\tclassName={css`\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\n\t\t\t\tmin-height: 100vh;\n\n\t\t\t\tmargin-top: 2rem;\n\t\t\t\tmargin-bottom: 2rem;\n\n\t\t\t\ttext-align: center;\n\t\t\t`}\n\t\t>\n\t\t\t<main\n\t\t\t\tclassName={css`\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\tflex-direction: column;\n\n\t\t\t\t\t& > * {\n\t\t\t\t\t\tmargin-top: 4rem;\n\t\t\t\t\t}\n\n\t\t\t\t\tmargin-bottom: 4rem;\n\t\t\t\t`}\n\t\t\t>\n\t\t\t\t<Logo />\n\n\t\t\t\t<Grid />\n\n\t\t\t\t<UIStates />\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n","import { configureStore, ThunkAction, Action, getDefaultMiddleware } from \"@reduxjs/toolkit\";\n\n// eslint-disable-next-line import/no-cycle\nimport gridReducer from \"../grid/gridSlice\";\n\nexport const store = configureStore({\n\treducer: {\n\t\tgrid: gridReducer,\n\t},\n\tmiddleware: getDefaultMiddleware({\n\t\t/**\n\t\t * allow using `Uint8Array`s\n\t\t */\n\t\tserializableCheck: {\n\t\t\tignoredActions: [\"grid/clickSquare\", \"grid/invert\"],\n\t\t\tignoredPaths: [\"grid.grid\", \"grid.indicesOfShortestPathSquares\"],\n\t\t},\n\t}),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === \"installed\") {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\"Content is cached for offline use.\");\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error(\"Error during service worker registration:\", error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\"content-type\");\n\t\t\tif (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\"No internet connection found. App is running in offline mode.\");\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport App from \"./features/app/App\";\nimport { store } from \"./features/app/store\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<Provider store={store}>\n\t\t\t<App />\n\t\t</Provider>\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}