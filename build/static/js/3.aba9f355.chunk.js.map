{"version":3,"sources":["../shortest-path/pkg/shortest_path_bg.js"],"names":["cachegetUint8Memory0","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","buffer","wasm","Uint8Array","set","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachegetUint16Memory0","getArrayU16FromWasm0","len","Uint16Array","subarray","breadth_first_search_shortest_path","grid","rows","cols","start_idx","retptr","ptr0","len0","r0","r1","v1","slice","SquareState","Object","freeze","Filled","Clear","Start","End"],"mappings":"2SAEIA,EAAuB,KAQ3B,IAAIC,EAAkB,EAEtB,SAASC,EAAkBC,EAAKC,GAC5B,IAAMC,EAAMD,EAAoB,EAAbD,EAAIG,QAGvB,OAZ6B,OAAzBN,GAAiCA,EAAqBO,SAAWC,IAAYD,SAC7EP,EAAuB,IAAIS,WAAWD,IAAYD,SAE/CP,GAOWU,IAAIP,EAAKE,EAAM,GACjCJ,EAAkBE,EAAIG,OACfD,EAGX,IAAIM,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBJ,SAAWC,IAAYD,SAC7EI,EAAuB,IAAIE,WAAWL,IAAYD,SAE/CI,EAGX,IAAIG,EAAwB,KAQ5B,SAASC,EAAqBV,EAAKW,GAC/B,OAP8B,OAA1BF,GAAkCA,EAAsBP,SAAWC,IAAYD,SAC/EO,EAAwB,IAAIG,YAAYT,IAAYD,SAEjDO,GAImBI,SAASb,EAAM,EAAGA,EAAM,EAAIW,GASnD,SAASG,EAAmCC,EAAMC,EAAMC,EAAMC,GACjE,IACI,IAAMC,EAAShB,KAAsC,IACjDiB,EAAOvB,EAAkBkB,EAAMZ,KAC/BkB,EAAOzB,EACXO,IAAwCgB,EAAQC,EAAMC,EAAML,EAAMC,EAAMC,GACxE,IAAII,EAAKf,IAAkBY,EAAS,EAAI,GACpCI,EAAKhB,IAAkBY,EAAS,EAAI,GACpCK,EAAKd,EAAqBY,EAAIC,GAAIE,QAEtC,OADAtB,IAAqBmB,EAAS,EAALC,GAClBC,EATX,QAWIrB,IAAqC,KAMtC,IAAMuB,EAAcC,OAAOC,OAAO,CAAEC,OAAO,EAAE,EAAI,SAASC,MAAM,EAAE,EAAI,QAAQC,MAAM,EAAE,EAAI,QAAQC,IAAI,EAAE,EAAI","file":"static/js/3.aba9f355.chunk.js","sourcesContent":["import * as wasm from './shortest_path_bg.wasm';\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint16Memory0 = null;\nfunction getUint16Memory0() {\n    if (cachegetUint16Memory0 === null || cachegetUint16Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint16Memory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachegetUint16Memory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    return getUint16Memory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n* @param {Uint8Array} grid\n* @param {number} rows\n* @param {number} cols\n* @param {number} start_idx\n* @returns {Uint16Array}\n*/\nexport function breadth_first_search_shortest_path(grid, rows, cols, start_idx) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArray8ToWasm0(grid, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.breadth_first_search_shortest_path(retptr, ptr0, len0, rows, cols, start_idx);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU16FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 2);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n*/\nexport const SquareState = Object.freeze({ Filled:0,\"0\":\"Filled\",Clear:1,\"1\":\"Clear\",Start:2,\"2\":\"Start\",End:3,\"3\":\"End\", });\n\n"],"sourceRoot":""}