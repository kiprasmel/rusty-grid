{"ast":null,"code":"import _regeneratorRuntime from\"/home/runner/work/rusty-grid/rusty-grid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/runner/work/rusty-grid/rusty-grid/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, camelcase\n// import { SquareState } from \"../../../node_modules/shortest-path/shortest_path\";\n// eslint-disable-next-line import/no-cycle\n// eslint-disable-next-line import/no-cycle\nimport{SquareState}from\"./Square\";// export { SquareState };\n// eslint-disable-next-line camelcase\nvar computeShortestPathWasm;var hasLoadedShortestPathWasm=false;/**\n * must be loaded asynchronously\n */export var loadShortestPathWasm=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var loadedWasm;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return import(\"../../../node_modules/shortest-path/shortest_path.js\");case 2:loadedWasm=_context.sent;computeShortestPathWasm=loadedWasm.breadth_first_search_shortest_path;hasLoadedShortestPathWasm=true;window.sp=computeShortestPathWasm;case 6:case\"end\":return _context.stop();}}},_callee);}));return function loadShortestPathWasm(){return _ref.apply(this,arguments);};}();export var computeShortestPath=function computeShortestPath(grid,rows,cols){var clearSquareCount=grid.filter(function(sq){return sq===SquareState.Clear;}).length;if(clearSquareCount<Math.min(rows,cols)-2){/**\n\t\t * impossible to have any path that connects start & end\n\t\t */console.log(\"skipping computation because impossible\");return new Uint16Array();}if(!hasLoadedShortestPathWasm){throw new Error(\"wasm not loaded yet\");}var findIdxOfFirstWithState=function findIdxOfFirstWithState(state){for(var i=0;i<grid.length;i++){if(grid[i]===state){return i;}}throw new Error(\"state not found\");};var startIdx=findIdxOfFirstWithState(SquareState.Start);var indicesOfSquaresBelongingToShortestPath=computeShortestPathWasm(grid,rows,cols,startIdx);return indicesOfSquaresBelongingToShortestPath;};","map":{"version":3,"sources":["/home/runner/work/rusty-grid/rusty-grid/src/features/grid/shortestPath.ts"],"names":["SquareState","computeShortestPathWasm","hasLoadedShortestPathWasm","loadShortestPathWasm","loadedWasm","breadth_first_search_shortest_path","window","sp","computeShortestPath","grid","rows","cols","clearSquareCount","filter","sq","Clear","length","Math","min","console","log","Uint16Array","Error","findIdxOfFirstWithState","state","i","startIdx","Start","indicesOfSquaresBelongingToShortestPath"],"mappings":"yTAAA;AAEA;AAEA;AAEA;AACA,OAASA,WAAT,KAA4B,UAA5B,CAEA;AAEA;AACA,GAAIC,CAAAA,uBAAJ,CACA,GAAIC,CAAAA,yBAAkC,CAAG,KAAzC,CAEA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,oBAAoB,0FAAG,wKAEV,QAAO,sDAAP,CAFU,QAE7BC,UAF6B,eAInCH,uBAAuB,CAAGG,UAAU,CAACC,kCAArC,CACAH,yBAAyB,CAAG,IAA5B,CAECI,MAAD,CAAgBC,EAAhB,CAAqBN,uBAArB,CAPmC,sDAAH,kBAApBE,CAAAA,oBAAoB,0CAA1B,CAUP,MAAO,IAAMK,CAAAA,mBAAmB,CAAG,QAAtBA,CAAAA,mBAAsB,CAACC,IAAD,CAAcC,IAAd,CAA4BC,IAA5B,CAAqE,CACvG,GAAMC,CAAAA,gBAAwB,CAAGH,IAAI,CAACI,MAAL,CAAY,SAACC,EAAD,QAAQA,CAAAA,EAAE,GAAKd,WAAW,CAACe,KAA3B,EAAZ,EAA8CC,MAA/E,CAEA,GAAIJ,gBAAgB,CAAGK,IAAI,CAACC,GAAL,CAASR,IAAT,CAAeC,IAAf,EAAuB,CAA9C,CAAiD,CAChD;AACF;AACA,KACEQ,OAAO,CAACC,GAAR,CAAY,yCAAZ,EAEA,MAAO,IAAIC,CAAAA,WAAJ,EAAP,CACA,CAED,GAAI,CAACnB,yBAAL,CAAgC,CAC/B,KAAM,IAAIoB,CAAAA,KAAJ,CAAU,qBAAV,CAAN,CACA,CAED,GAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAACC,KAAD,CAAgC,CAC/D,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGhB,IAAI,CAACO,MAAzB,CAAiCS,CAAC,EAAlC,CAAsC,CACrC,GAAIhB,IAAI,CAACgB,CAAD,CAAJ,GAAYD,KAAhB,CAAuB,CACtB,MAAOC,CAAAA,CAAP,CACA,CACD,CAED,KAAM,IAAIH,CAAAA,KAAJ,CAAU,iBAAV,CAAN,CACA,CARD,CAUA,GAAMI,CAAAA,QAAgB,CAAGH,uBAAuB,CAACvB,WAAW,CAAC2B,KAAb,CAAhD,CAEA,GAAMC,CAAAA,uCAA+D,CAAG3B,uBAAuB,CAC9FQ,IAD8F,CAE9FC,IAF8F,CAG9FC,IAH8F,CAI9Fe,QAJ8F,CAA/F,CAOA,MAAOE,CAAAA,uCAAP,CACA,CApCM","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved, camelcase\nimport * as sp from \"../../../node_modules/shortest-path/shortest_path\";\n// import { SquareState } from \"../../../node_modules/shortest-path/shortest_path\";\n\n// eslint-disable-next-line import/no-cycle\nimport { GridT, IndicesOfShortestPathT } from \"./gridSlice\";\n// eslint-disable-next-line import/no-cycle\nimport { SquareState } from \"./Square\";\n\n// export { SquareState };\n\n// eslint-disable-next-line camelcase\nlet computeShortestPathWasm: typeof sp.breadth_first_search_shortest_path;\nlet hasLoadedShortestPathWasm: boolean = false;\n\n/**\n * must be loaded asynchronously\n */\nexport const loadShortestPathWasm = async (): Promise<void> => {\n\t// eslint-disable-next-line import/no-extraneous-dependencies, import/no-unresolved\n\tconst loadedWasm = await import(\"../../../node_modules/shortest-path/shortest_path.js\");\n\n\tcomputeShortestPathWasm = loadedWasm.breadth_first_search_shortest_path;\n\thasLoadedShortestPathWasm = true;\n\n\t(window as any).sp = computeShortestPathWasm;\n};\n\nexport const computeShortestPath = (grid: GridT, rows: number, cols: number): IndicesOfShortestPathT => {\n\tconst clearSquareCount: number = grid.filter((sq) => sq === SquareState.Clear).length;\n\n\tif (clearSquareCount < Math.min(rows, cols) - 2) {\n\t\t/**\n\t\t * impossible to have any path that connects start & end\n\t\t */\n\t\tconsole.log(\"skipping computation because impossible\");\n\n\t\treturn new Uint16Array();\n\t}\n\n\tif (!hasLoadedShortestPathWasm) {\n\t\tthrow new Error(\"wasm not loaded yet\");\n\t}\n\n\tconst findIdxOfFirstWithState = (state: SquareState): number => {\n\t\tfor (let i = 0; i < grid.length; i++) {\n\t\t\tif (grid[i] === state) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"state not found\");\n\t};\n\n\tconst startIdx: number = findIdxOfFirstWithState(SquareState.Start);\n\n\tconst indicesOfSquaresBelongingToShortestPath: IndicesOfShortestPathT = computeShortestPathWasm(\n\t\tgrid,\n\t\trows,\n\t\tcols,\n\t\tstartIdx\n\t);\n\n\treturn indicesOfSquaresBelongingToShortestPath;\n};\n"]},"metadata":{},"sourceType":"module"}