{"ast":null,"code":"import * as wasm from './shortest_path_bg.wasm';\nvar cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n  if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint8Memory0;\n}\n\nvar WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n  var ptr = malloc(arg.length * 1);\n  getUint8Memory0().set(arg, ptr / 1);\n  WASM_VECTOR_LEN = arg.length;\n  return ptr;\n}\n\nvar cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n  if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n    cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n  }\n\n  return cachegetInt32Memory0;\n}\n\nvar cachegetUint16Memory0 = null;\n\nfunction getUint16Memory0() {\n  if (cachegetUint16Memory0 === null || cachegetUint16Memory0.buffer !== wasm.memory.buffer) {\n    cachegetUint16Memory0 = new Uint16Array(wasm.memory.buffer);\n  }\n\n  return cachegetUint16Memory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n  return getUint16Memory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n* @param {Uint8Array} grid\n* @param {number} rows\n* @param {number} cols\n* @param {number} start_idx\n* @returns {Uint16Array}\n*/\n\n\nexport function breadth_first_search_shortest_path(grid, rows, cols, start_idx) {\n  try {\n    var retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n\n    var ptr0 = passArray8ToWasm0(grid, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    wasm.breadth_first_search_shortest_path(retptr, ptr0, len0, rows, cols, start_idx);\n    var r0 = getInt32Memory0()[retptr / 4 + 0];\n    var r1 = getInt32Memory0()[retptr / 4 + 1];\n    var v1 = getArrayU16FromWasm0(r0, r1).slice();\n\n    wasm.__wbindgen_free(r0, r1 * 2);\n\n    return v1;\n  } finally {\n    wasm.__wbindgen_add_to_stack_pointer(16);\n  }\n}\n/**\n*/\n\nexport var SquareState = Object.freeze({\n  Filled: 0,\n  \"0\": \"Filled\",\n  Clear: 1,\n  \"1\": \"Clear\",\n  Start: 2,\n  \"2\": \"Start\",\n  End: 3,\n  \"3\": \"End\"\n});","map":{"version":3,"sources":["/home/runner/work/rusty-grid/rusty-grid/shortest-path/pkg/shortest_path_bg.js"],"names":["wasm","cachegetUint8Memory0","getUint8Memory0","buffer","memory","Uint8Array","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","ptr","length","set","cachegetInt32Memory0","getInt32Memory0","Int32Array","cachegetUint16Memory0","getUint16Memory0","Uint16Array","getArrayU16FromWasm0","len","subarray","breadth_first_search_shortest_path","grid","rows","cols","start_idx","retptr","__wbindgen_add_to_stack_pointer","ptr0","__wbindgen_malloc","len0","r0","r1","v1","slice","__wbindgen_free","SquareState","Object","freeze","Filled","Clear","Start","End"],"mappings":"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","sourcesContent":["import * as wasm from './shortest_path_bg.wasm';\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint16Memory0 = null;\nfunction getUint16Memory0() {\n    if (cachegetUint16Memory0 === null || cachegetUint16Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint16Memory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachegetUint16Memory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    return getUint16Memory0().subarray(ptr / 2, ptr / 2 + len);\n}\n/**\n* @param {Uint8Array} grid\n* @param {number} rows\n* @param {number} cols\n* @param {number} start_idx\n* @returns {Uint16Array}\n*/\nexport function breadth_first_search_shortest_path(grid, rows, cols, start_idx) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = passArray8ToWasm0(grid, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.breadth_first_search_shortest_path(retptr, ptr0, len0, rows, cols, start_idx);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU16FromWasm0(r0, r1).slice();\n        wasm.__wbindgen_free(r0, r1 * 2);\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n*/\nexport const SquareState = Object.freeze({ Filled:0,\"0\":\"Filled\",Clear:1,\"1\":\"Clear\",Start:2,\"2\":\"Start\",End:3,\"3\":\"End\", });\n\n"]},"metadata":{},"sourceType":"module"}